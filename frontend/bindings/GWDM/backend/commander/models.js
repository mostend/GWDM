// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../time/models.js";

export class Parameter {
    /**
     * Creates a new Parameter instance.
     * @param {Partial<Parameter>} [$$source = {}] - The source object to create the Parameter.
     */
    constructor($$source = {}) {
        if (!("ParameterDescription" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ParameterDescription"] = "";
        }
        if (!("ParameterValue" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ParameterValue"] = "";
        }
        if (!("ParameterReferenceValue" in $$source)) {
            /**
             * @member
             * @type {any}
             */
            this["ParameterReferenceValue"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Parameter instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Parameter}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Parameter(/** @type {Partial<Parameter>} */($$parsedSource));
    }
}

export class SSHService {
    /**
     * Creates a new SSHService instance.
     * @param {Partial<SSHService>} [$$source = {}] - The source object to create the SSHService.
     */
    constructor($$source = {}) {
        if (!("IP" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["IP"] = "";
        }
        if (!("Port" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Port"] = 0;
        }
        if (!("UserName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["UserName"] = "";
        }
        if (!("Password" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Password"] = "";
        }
        if (!("Scripts" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["Scripts"] = [];
        }
        if (!("Timeout" in $$source)) {
            /**
             * Timeout for SSH operations
             * @member
             * @type {time$0.Duration}
             */
            this["Timeout"] = time$0.Duration.$zero;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SSHService instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SSHService}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Scripts" in $$parsedSource) {
            $$parsedSource["Scripts"] = $$createField4_0($$parsedSource["Scripts"]);
        }
        return new SSHService(/** @type {Partial<SSHService>} */($$parsedSource));
    }
}

export class Script {
    /**
     * Creates a new Script instance.
     * @param {Partial<Script>} [$$source = {}] - The source object to create the Script.
     */
    constructor($$source = {}) {
        if (!("ScriptName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ScriptName"] = "";
        }
        if (!("ScriptDescription" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ScriptDescription"] = "";
        }
        if (!("Command" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Command"] = "";
        }
        if (!("WaitingFor" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["WaitingFor"] = "";
        }
        if (!("Interrupt" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Interrupt"] = "";
        }
        if (!("GoOnCommand" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["GoOnCommand"] = "";
        }
        if (!("Parameter" in $$source)) {
            /**
             * @member
             * @type {Parameter[]}
             */
            this["Parameter"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Script instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Script}
     */
    static createFrom($$source = {}) {
        const $$createField6_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Parameter" in $$parsedSource) {
            $$parsedSource["Parameter"] = $$createField6_0($$parsedSource["Parameter"]);
        }
        return new Script(/** @type {Partial<Script>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = Parameter.createFrom;
const $$createType2 = $Create.Array($$createType1);
